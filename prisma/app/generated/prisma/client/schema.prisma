generator client {
  provider      = "prisma-client-js"
  output        = "app/generated/prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model WeddingEvent {
  id             String   @id @default(uuid())
  name           String
  slug           String   @unique
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  guests  Guest[]
  posts   Post[]
  stories Story[]

  @@map("wedding_events")
}

model Guest {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  hashedPassword String
  avatarUrl      String?  @map("avatar_url")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  weddingEvent   WeddingEvent @relation(fields: [weddingEventId], references: [id], onDelete: Cascade)
  weddingEventId String       @map("wedding_event_id")

  posts    Post[]
  stories  Story[]
  comments Comment[]
  likes    Like[]

  @@index([weddingEventId])
  @@map("guests")
}

model Post {
  id        String   @id @default(uuid())
  content   String?  @db.Text
  imageUrl  String?  @map("image_url")
  videoUrl  String?  @map("video_url")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guest          Guest        @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId        String       @map("guest_id")
  weddingEvent   WeddingEvent @relation(fields: [weddingEventId], references: [id], onDelete: Cascade)
  weddingEventId String       @map("wedding_event_id")

  comments Comment[]
  likes    Like[]

  @@index([guestId])
  @@index([weddingEventId])
  @@map("posts")
}

model Story {
  id        String   @id @default(uuid())
  mediaUrl  String   @map("media_url")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now())

  guest          Guest        @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId        String       @map("guest_id")
  weddingEvent   WeddingEvent @relation(fields: [weddingEventId], references: [id], onDelete: Cascade)
  weddingEventId String       @map("wedding_event_id")

  @@index([guestId])
  @@index([weddingEventId])
  @@map("stories")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  guest   Guest  @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId String @map("guest_id")
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String @map("post_id")

  @@index([guestId])
  @@index([postId])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  guest   Guest  @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId String @map("guest_id")
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String @map("post_id")

  @@unique([guestId, postId])
  @@index([guestId])
  @@index([postId])
  @@map("likes")
}
